{
    "atomType": "Molecule",
    "name": "Involute Gear",
    "x": 0,
    "y": 0,
    "uniqueID": 623227,
    "ioValues": [],
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.3645933014354067,
            "y": 0.3831417624521073,
            "uniqueID": 644051,
            "ioValues": [],
            "code": "//You can learn more about all of the available methods at https://jsxcad.js.org/app/UserGuide.html \n\n\nfunction main(Input1, Input2){\n  return involuteGear(10,15,20,0,5)\n}\n\nreturn main(Input1, Input2)\n\nfunction involuteGear(numTeeth, circularPitch, pressureAngle, clearance, thickness){\n    \n  // default values:\n  if(arguments.length < 3) pressureAngle = 20;\n  if(arguments.length < 4) clearance = 0;\n  if(arguments.length < 4) thickness = 1;\n  \n  var addendum = circularPitch / Math.PI;\n  var dedendum = addendum + clearance;\n  \n  // radiuses of the 4 circles:\n  var pitchRadius = numTeeth * circularPitch / (2 * Math.PI);\n  var baseRadius = pitchRadius * Math.cos(Math.PI * pressureAngle / 180);\n  var outerRadius = pitchRadius + addendum;\n  var rootRadius = pitchRadius - dedendum;\n\n  var maxtanlength = Math.sqrt(outerRadius*outerRadius - baseRadius*baseRadius);\n  var maxangle = maxtanlength / baseRadius;\n\n  var tl_at_pitchcircle = Math.sqrt(pitchRadius*pitchRadius - baseRadius*baseRadius);\n  var angle_at_pitchcircle = tl_at_pitchcircle / baseRadius;\n  var diffangle = angle_at_pitchcircle - Math.atan(angle_at_pitchcircle);\n  var angularToothWidthAtBase = Math.PI / numTeeth + 2*diffangle;\n  \n  // build a single 2d tooth in the 'points' array:\n  var resolution = 5;\n  var points = [vec2.create(0,0)];\n  for(var i = 0; i <= resolution; i++)\n  {\n    // first side of the tooth:\n    var angle = maxangle * i / resolution;\n    var tanlength = angle * baseRadius;\n    var radvector = vec2.fromAngleDegrees(angle);\n    var tanvector = vec2.normal(radvector);\n    \n    var p = vec2.add(vec2.scale(baseRadius, radvector), vec2.scale(tanlength,tanvector));\n    \n    points[i+1] = p;\n    \n    // opposite side of the tooth:\n    radvector = vec2.fromAngle(angularToothWidthAtBase - angle);    \n    tanvector = vec2.negate(vec2.normal(radvector));\n    \n    p = vec2.add(vec2.scale(baseRadius, radvector), vec2.scale(tanlength, tanvector));\n    points[2 * resolution + 2 - i] = p;\n  }\n  \n  // create the polygon and extrude into 3D:\n    \n    console.log(points)\n    \n    var tooth3d = extrudeLinear({}, poly2.create(points))    //.extrude({offset: [0, 0, thickness]});\n    \n    console.log(tooth3d)\n    \n    return tooth3d\n}"
        },
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.9853587115666179,
            "y": 0.5,
            "ioValues": []
        }
    ],
    "allConnectors": [
        {
            "ap1Name": "geometry",
            "ap2Name": "number or geometry",
            "ap2Primary": false,
            "ap1ID": 644051
        }
    ],
    "fileTypeVersion": 1,
    "filetypeVersion": 1,
    "circleSegmentSize": 2
}