{
    "atomType": "Molecule",
    "name": "Involute Gear",
    "x": 0,
    "y": 0,
    "uniqueID": 623227,
    "ioValues": [
        {
            "name": "Number Of Teeth",
            "ioValue": 45
        },
        {
            "name": "Circular Pitch",
            "ioValue": 2
        },
        {
            "name": "Pressure Angle",
            "ioValue": 20
        },
        {
            "name": "Clearance",
            "ioValue": 0
        }
    ],
    "topLevel": true,
    "allAtoms": [
        {
            "atomType": "Input",
            "name": "Number Of Teeth",
            "x": 0.013333333333333334,
            "y": 0.19540229885057472,
            "uniqueID": 413161,
            "ioValues": []
        },
        {
            "atomType": "Input",
            "name": "Circular Pitch",
            "x": 0.013333333333333334,
            "y": 0.32567049808429116,
            "uniqueID": 853939,
            "ioValues": []
        },
        {
            "atomType": "Input",
            "name": "Pressure Angle",
            "x": 0.013333333333333334,
            "y": 0.4406130268199233,
            "uniqueID": 791030,
            "ioValues": []
        },
        {
            "atomType": "Code",
            "name": "Code",
            "x": 0.4185149469623915,
            "y": 0.3549618320610687,
            "uniqueID": 644051,
            "ioValues": [
                {
                    "name": "numTeeth",
                    "ioValue": 45
                },
                {
                    "name": "circularPitch",
                    "ioValue": 2
                },
                {
                    "name": "pressureAngle",
                    "ioValue": 20
                },
                {
                    "name": "clearance",
                    "ioValue": 0
                }
            ],
            "code": "\n\nfunction main(numTeeth, circularPitch, pressureAngle, clearance){\n  \n  const example = GearProfile(numTeeth, { mmPerTooth:circularPitch,\n    pressureAngle:pressureAngle,\n    clearance: clearance});\n  \n  return example\n}\n\n// Probably derived from https://github.com/sadr0b0t/pd-gears/blob/master/pd-gears.scad\n// Public Domain Parametric Involute Spur Gear (and involute helical gear and involute rack)\n// version 1.1 by Leemon Baird, 2011, Leemon@Leemon.com\n\n// convert polar to cartesian coordinates\nconst polar = (r, theta) => [r * sin(theta), r * cos(theta)];\n\n// point at radius d on the involute curve\nconst q6 = (b, s, t, d) => polar(d, s * (iang(b, d) + t));\n\n// radius a fraction f up the curved side of the tooth\nconst q7 = (f, r, b, r2, t, s) => q6(b, s, t, (1 - f) * max(b, r) + f * r2);\n\n// unwind a string this many degrees to go from radius r1 to radius r2\nconst iang = (r1, r2) =>\n  (sqrt((r2 / r1) * (r2 / r1) - 1) / Math.PI) * 180 - acos(r1 / r2);\n\nconst ToothProfile = ({ r, b, c, k, numberOfTeeth }) => {\n  const path = [\n    polar(r, -k),\n    q7(0 / 5, r, b, c, k, -1),\n    q7(1 / 5, r, b, c, k, -1),\n    q7(2 / 5, r, b, c, k, -1),\n    q7(3 / 5, r, b, c, k, -1),\n    q7(4 / 5, r, b, c, k, -1),\n    q7(5 / 5, r, b, c, k, -1),\n    q7(5 / 5, r, b, c, k, 1),\n    q7(4 / 5, r, b, c, k, 1),\n    q7(3 / 5, r, b, c, k, 1),\n    q7(2 / 5, r, b, c, k, 1),\n    q7(1 / 5, r, b, c, k, 1),\n    q7(0 / 5, r, b, c, k, 1),\n  ];\n\n  if (r < b) {\n    path.push(polar(r, k));\n  }\n\n  return Shape.fromOpenPath(path);\n};\n\nconst pitchRadius = (mmPerTooth = Math.PI, numberOfTeeth = 16) =>\n  (mmPerTooth * numberOfTeeth) / Math.PI / 2;\n\nconst outerRadius = (\n  mmPerTooth = Math.PI,\n  numberOfTeeth = 16,\n  clearance = 0\n) => pitchRadius(mmPerTooth, numberOfTeeth) + mmPerTooth / Math.PI - clearance;\n\nconst baseRadius = (\n  mmPerTooth = Math.PI,\n  numberOfTeeth = 16,\n  pressureAngle = 20\n) => pitchRadius(mmPerTooth, numberOfTeeth) * cos(pressureAngle);\n\nconst rootRadius = (\n  mmPerTooth = Math.PI,\n  numberOfTeeth = 16,\n  clearance = 0\n) => {\n  const p = pitchRadius(mmPerTooth, numberOfTeeth);\n  const c = outerRadius(mmPerTooth, numberOfTeeth);\n  return p - (c - p) - clearance;\n};\n\nconst GearProfile = (\n  numberOfTeeth = 16,\n  {\n    mmPerTooth = Math.PI,\n    teethToHide = 0,\n    pressureAngle = 20,\n    clearance = 0,\n    backlash = 0,\n  } = {}\n) => {\n  const pi = Math.PI;\n  // const p = mmPerTooth * numberOfTeeth / pi / 2; // radius of pitch circle\n  const p = pitchRadius(mmPerTooth, numberOfTeeth);\n  const c = outerRadius(mmPerTooth, numberOfTeeth, clearance);\n  const b = baseRadius(mmPerTooth, numberOfTeeth, pressureAngle);\n  const r = rootRadius(mmPerTooth, numberOfTeeth, clearance);\n  const t = mmPerTooth / 2 - backlash / 2;\n  \n  console.log(p);\n\n  // angle to where involute meets base circle on each side of tooth\n  const k = -iang(b, p) - (t / 2 / p / pi) * 180;\n\n  const toothProfile = ToothProfile({ r, b, c, k, numberOfTeeth });\n\n  let profile = Shape.fromOpenPath([]);\n  for (let i = 0; i < numberOfTeeth - teethToHide; i++) {\n    profile = profile.concat(toothProfile.rotateZ((-i * 360) / numberOfTeeth));\n  }\n\n  return profile.close().fill();\n};\n\n\nreturn main(numTeeth, circularPitch, pressureAngle, clearance)\n"
        },
        {
            "atomType": "Input",
            "name": "Clearance",
            "x": 0.013333333333333334,
            "y": 0.5977011494252873,
            "uniqueID": 352264,
            "ioValues": []
        },
        {
            "atomType": "Output",
            "name": "Output",
            "x": 0.9853587115666179,
            "y": 0.5,
            "uniqueID": 120219,
            "ioValues": [
                {
                    "name": "number or geometry",
                    "ioValue": "atoms/623227/644051Code"
                }
            ]
        }
    ],
    "allConnectors": [
        {
            "ap1Name": "number or geometry",
            "ap2Name": "numTeeth",
            "ap2Primary": false,
            "ap1ID": 413161,
            "ap2ID": 644051
        },
        {
            "ap1Name": "number or geometry",
            "ap2Name": "circularPitch",
            "ap2Primary": false,
            "ap1ID": 853939,
            "ap2ID": 644051
        },
        {
            "ap1Name": "number or geometry",
            "ap2Name": "pressureAngle",
            "ap2Primary": false,
            "ap1ID": 791030,
            "ap2ID": 644051
        },
        {
            "ap1Name": "geometry",
            "ap2Name": "number or geometry",
            "ap2Primary": false,
            "ap1ID": 644051,
            "ap2ID": 120219
        },
        {
            "ap1Name": "number or geometry",
            "ap2Name": "clearance",
            "ap2Primary": false,
            "ap1ID": 352264,
            "ap2ID": 644051
        }
    ],
    "fileTypeVersion": 1,
    "simplify": false,
    "filetypeVersion": 1,
    "circleSegmentSize": 2
}